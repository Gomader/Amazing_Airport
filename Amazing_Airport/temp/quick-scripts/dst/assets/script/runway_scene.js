
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/runway_scene.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '660dfXmAJ1O54O3BLVKKhKx', 'runway_scene');
// script/runway_scene.js

"use strict";

var userdata = require('userdata');

cc.Class({
  "extends": cc.Component,
  properties: {
    userid: cc.Integer,
    runway: {
      type: cc.Node,
      "default": null
    },
    road: {
      type: cc.Node,
      "default": null
    },
    stand: {
      type: cc.Node,
      "default": null
    },
    airplaneOnStand: {
      type: cc.Node,
      "default": null
    },
    username: {
      type: cc.Label,
      "default": null
    },
    stars: {
      type: cc.Label,
      "default": null
    },
    fuel: {
      type: cc.ProgressBar,
      "default": null
    },
    fuelnum: {
      type: cc.Label,
      "default": null
    },
    fuelclock: {
      type: cc.Node,
      "default": null
    },
    fuelclocknumber: {
      type: cc.Label,
      "default": null
    },
    passenger: {
      type: cc.ProgressBar,
      "default": null
    },
    passengernum: {
      type: cc.Label,
      "default": null
    },
    passengerclock: {
      type: cc.Node,
      "default": null
    },
    passengerclocknumber: {
      type: cc.Label,
      "default": null
    },
    coins: {
      type: cc.Label,
      "default": null
    },
    maxfuel: cc.Integer,
    maxpassenger: cc.Integer,
    allclock: Object,
    time: cc.Integer
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {
    this.node.opacity = 0;
    this.userid = cc.sys.localStorage.getItem("id");
    this.allclock = {
      fuelclock: {
        runstate: false,
        timenumber: 0
      },
      passengerclock: {
        runstate: false,
        timenumber: 0
      }
    }, userdata.lefts = {
      leftfuel: 0,
      leftpassenger: 0
    };
    this.newuser();
    this.backtogame(cc.sys.localStorage.getItem("stars"));
  },
  start: function start() {
    this.node.runAction(cc.fadeIn(1.0));
    this.startclock();
  },
  update: function update(dt) {
    this.showmap();
  },
  newuser: function newuser() {
    if (this.userid == null) {
      cc.director.loadScene("homepage_scene");
    } else {
      this.inits();
    }
  },
  downloadUserData: function downloadUserData() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://140.143.126.73/amazing_airport/amazing_airport.php?module=1", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.send("id=" + this.userid);

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        if (xhr.responseText != 0) {
          userdata.allfile = JSON.parse(xhr.responseText);
        }
      }
    };
  },
  uploadUserData: function uploadUserData() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://140.143.126.73/amazing_airport/amazing_airport.php?module=2", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.send("id=" + this.userid + "&userData=" + JSON.stringify(userdata.allfile));

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        if (xhr.responseText == 1) {
          console.log(1);
        }
      }
    };
  },
  downloadAirplaneData: function downloadAirplaneData() {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://140.143.126.73/amazing_airport/amazing_airport.php?module=3", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.send("id=" + this.userid);

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        if (xhr.responseText != 0) {
          var res = eval(xhr.responseText);
          var airplanelist = [];

          for (var i in res) {
            airplanelist.push(res[i]);
          }

          userdata.airplanedata = airplanelist;
        }
      }
    };
  },
  uploadAirplaneData: function uploadAirplaneData() {
    var list = [];

    for (var i in userdata.airplanedata) {
      list.push(JSON.stringify(userdata.airplanedata[i]));
    }

    var data = "[" + list.join(',') + "]";
    var xhr = new XMLHttpRequest();
    xhr.open("POST", "https://140.143.126.73/amazing_airport/amazing_airport.php?module=4", true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhr.send("id=" + this.userid + "&userData=" + data);

    xhr.onreadystatechange = function () {
      if (xhr.readyState == 4 && xhr.status >= 200 && xhr.status < 400) {
        if (xhr.responseText == 1) {
          console.log(1);
        }
      }
    };
  },
  backtogame: function backtogame(stars) {
    var maxfuel = stars + 10;
    var maxpassenger = stars * 2 + 20;
    var leavetime = (Date.parse(new Date()) - cc.sys.localStorage.getItem("time")) / 1000;
    var left = JSON.parse(cc.sys.localStorage.getItem("lefts"));

    if (left.leftfuel >= maxfuel) {
      userdata.lefts.leftfuel = left.leftfuel;
    } else {
      var add = Math.floor(leavetime / 60) + left.leftfuel;

      if (add >= maxfuel) {
        userdata.lefts.leftfuel = maxfuel;
      } else {
        userdata.lefts.leftfuel = add;
      }
    }

    if (left.leftpassenger >= maxpassenger) {
      userdata.lefts.leftpassenger = left.leftpassenger;
    } else {
      var add = Math.floor(leavetime / 60) + left.leftpassenger;

      if (add >= maxpassenger) {
        userdata.lefts.leftpassenger = maxpassenger;
      } else {
        userdata.lefts.leftpassenger = add;
      }
    }

    cc.sys.localStorage.setItem("lefts", JSON.stringify(userdata.lefts));
  },
  inits: function inits() {
    this.downloadUserData();
    this.downloadAirplaneData();
  },
  showmap: function showmap() {
    this.runway.getChildByName("up").getChildByName(userdata.allfile.buildings.uprunway.toString()).active = true;
    this.runway.getChildByName("down").getChildByName(userdata.allfile.buildings.downrunway.toString()).active = true;

    if (userdata.allfile.buildings.uprunway >= 9 && userdata.allfile.buildings.downrunway >= 9) {
      this.road.getChildByName("9-9").active = true;
    } else if (userdata.allfile.buildings.uprunway >= 6 && userdata.allfile.buildings.downrunway >= 6) {
      this.road.getChildByName("6-6").active = true;
    } else if (userdata.allfile.buildings.uprunway >= 3 && userdata.allfile.buildings.downrunway >= 3) {
      this.road.getChildByName("3-3").active = true;
    } else {
      this.road.getChildByName("1-1").active = true;
    }

    this.stand.getChildByName(userdata.allfile.buildings.stand.toString()).active = true;
    this.username.string = userdata.allfile.name;
    this.stars.string = userdata.allfile.stars;
    this.coins.string = userdata.allfile.money;
    this.maxfuel = userdata.allfile.stars + 10;
    this.maxpassenger = userdata.allfile.stars * 2 + 20;
    this.fuel.progress = userdata.lefts.leftfuel / this.maxfuel;
    this.fuelnum.string = userdata.lefts.leftfuel.toString() + "/" + this.maxfuel.toString();
    this.passenger.progress = userdata.lefts.leftpassenger / this.maxpassenger;
    this.passengernum.string = userdata.lefts.leftpassenger.toString() + "/" + this.maxpassenger.toString();

    if (userdata.lefts.leftfuel < this.maxfuel && this.allclock.fuelclock.runstate == false) {
      this.allclock.fuelclock.runstate = true;
      this.fuelclock.active = true;
    }

    if (userdata.lefts.leftpassenger < this.maxpassenger && this.allclock.passengerclock.runstate == false) {
      this.allclock.passengerclock.runstate = true;
      this.passengerclock.active = true;
    }

    for (var o in userdata.airplanedata) {
      if (userdata.airplanedata[o].isflying == 'false') {
        this.airplaneOnStand.getChildByName(o.toString()).getChildByName(userdata.airplanedata[o].level.toString()).active = true;
      }
    }
  },
  startclock: function startclock() {
    this.callback = function () {
      cc.sys.localStorage.setItem("time", Date.parse(new Date()));

      if (this.allclock.fuelclock.runstate == true) {
        this.allclock.fuelclock.timenumber += 1;

        if (this.allclock.fuelclock.timenumber == 60) {
          this.allclock.fuelclock.timenumber = 0;
          userdata.lefts.leftfuel += 1;
        }

        if (this.allclock.fuelclock.timenumber < 10) {
          this.fuelclocknumber.string = "0" + this.allclock.fuelclock.timenumber.toString();
        } else {
          this.fuelclocknumber.string = this.allclock.fuelclock.timenumber.toString();
        }

        if (userdata.lefts.leftfuel >= this.maxfuel) {
          this.allclock.fuelclock.runstate = false;
          this.allclock.fuelclock.timenumber = 0;
          this.fuelclock.active = false;
        }
      }

      if (this.allclock.passengerclock.runstate == true) {
        this.allclock.passengerclock.timenumber += 1;

        if (this.allclock.passengerclock.timenumber == 60) {
          this.allclock.passengerclock.timenumber = 0;
          userdata.lefts.leftpassenger += 1;
        }

        if (this.allclock.passengerclock.timenumber < 10) {
          this.passengerclocknumber.string = "0" + this.allclock.passengerclock.timenumber.toString();
        } else {
          this.passengerclocknumber.string = this.allclock.passengerclock.timenumber.toString();
        }

        if (userdata.lefts.leftpassenger >= this.maxpassenger) {
          this.allclock.passengerclock.runstate = false;
          this.allclock.passengerclock.timenumber = 0;
          this.passengerclock.active = false;
        }
      }

      if (this.time == 60) {
        this.uploadUserData();
        cc.sys.localStorage.setItem("lefts", JSON.stringify(userdata.lefts));
        cc.sys.localStorage.setItem("stars", userdata.allfile.stars);
        this.time == 0;
      } else {
        this.time += 1;
      }
    };

    this.schedule(function () {
      this.callback();
    }, 1);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHQvcnVud2F5X3NjZW5lLmpzIl0sIm5hbWVzIjpbInVzZXJkYXRhIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwidXNlcmlkIiwiSW50ZWdlciIsInJ1bndheSIsInR5cGUiLCJOb2RlIiwicm9hZCIsInN0YW5kIiwiYWlycGxhbmVPblN0YW5kIiwidXNlcm5hbWUiLCJMYWJlbCIsInN0YXJzIiwiZnVlbCIsIlByb2dyZXNzQmFyIiwiZnVlbG51bSIsImZ1ZWxjbG9jayIsImZ1ZWxjbG9ja251bWJlciIsInBhc3NlbmdlciIsInBhc3Nlbmdlcm51bSIsInBhc3NlbmdlcmNsb2NrIiwicGFzc2VuZ2VyY2xvY2tudW1iZXIiLCJjb2lucyIsIm1heGZ1ZWwiLCJtYXhwYXNzZW5nZXIiLCJhbGxjbG9jayIsIk9iamVjdCIsInRpbWUiLCJvbkxvYWQiLCJub2RlIiwib3BhY2l0eSIsInN5cyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJydW5zdGF0ZSIsInRpbWVudW1iZXIiLCJsZWZ0cyIsImxlZnRmdWVsIiwibGVmdHBhc3NlbmdlciIsIm5ld3VzZXIiLCJiYWNrdG9nYW1lIiwic3RhcnQiLCJydW5BY3Rpb24iLCJmYWRlSW4iLCJzdGFydGNsb2NrIiwidXBkYXRlIiwiZHQiLCJzaG93bWFwIiwiZGlyZWN0b3IiLCJsb2FkU2NlbmUiLCJpbml0cyIsImRvd25sb2FkVXNlckRhdGEiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwic2VuZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVRleHQiLCJhbGxmaWxlIiwiSlNPTiIsInBhcnNlIiwidXBsb2FkVXNlckRhdGEiLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwibG9nIiwiZG93bmxvYWRBaXJwbGFuZURhdGEiLCJyZXMiLCJldmFsIiwiYWlycGxhbmVsaXN0IiwiaSIsInB1c2giLCJhaXJwbGFuZWRhdGEiLCJ1cGxvYWRBaXJwbGFuZURhdGEiLCJsaXN0IiwiZGF0YSIsImpvaW4iLCJsZWF2ZXRpbWUiLCJEYXRlIiwibGVmdCIsImFkZCIsIk1hdGgiLCJmbG9vciIsInNldEl0ZW0iLCJnZXRDaGlsZEJ5TmFtZSIsImJ1aWxkaW5ncyIsInVwcnVud2F5IiwidG9TdHJpbmciLCJhY3RpdmUiLCJkb3ducnVud2F5Iiwic3RyaW5nIiwibmFtZSIsIm1vbmV5IiwicHJvZ3Jlc3MiLCJvIiwiaXNmbHlpbmciLCJsZXZlbCIsImNhbGxiYWNrIiwic2NoZWR1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsVUFBRCxDQUF0Qjs7QUFFQUMsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDTCxhQUFTRCxFQUFFLENBQUNFLFNBRFA7QUFHTEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1JDLElBQUFBLE1BQU0sRUFBQ0osRUFBRSxDQUFDSyxPQURGO0FBRVJDLElBQUFBLE1BQU0sRUFBQztBQUNIQyxNQUFBQSxJQUFJLEVBQUNQLEVBQUUsQ0FBQ1EsSUFETDtBQUVILGlCQUFRO0FBRkwsS0FGQztBQU1SQyxJQUFBQSxJQUFJLEVBQUM7QUFDREYsTUFBQUEsSUFBSSxFQUFDUCxFQUFFLENBQUNRLElBRFA7QUFFRCxpQkFBUTtBQUZQLEtBTkc7QUFVUkUsSUFBQUEsS0FBSyxFQUFDO0FBQ0ZILE1BQUFBLElBQUksRUFBQ1AsRUFBRSxDQUFDUSxJQUROO0FBRUYsaUJBQVE7QUFGTixLQVZFO0FBY1JHLElBQUFBLGVBQWUsRUFBQztBQUNaSixNQUFBQSxJQUFJLEVBQUNQLEVBQUUsQ0FBQ1EsSUFESTtBQUVaLGlCQUFRO0FBRkksS0FkUjtBQWtCUkksSUFBQUEsUUFBUSxFQUFDO0FBQ0xMLE1BQUFBLElBQUksRUFBQ1AsRUFBRSxDQUFDYSxLQURIO0FBRUwsaUJBQVE7QUFGSCxLQWxCRDtBQXNCUkMsSUFBQUEsS0FB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b3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIHVzZXJkYXRhID0gcmVxdWlyZSgndXNlcmRhdGEnKTtcblxuY2MuQ2xhc3Moe1xuICAgIGV4dGVuZHM6IGNjLkNvbXBvbmVudCxcblxuICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgdXNlcmlkOmNjLkludGVnZXIsXG4gICAgICAgIHJ1bndheTp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgcm9hZDp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgc3RhbmQ6e1xuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGFpcnBsYW5lT25TdGFuZDp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgdXNlcm5hbWU6e1xuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbCxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBzdGFyczp7XG4gICAgICAgICAgICB0eXBlOmNjLkxhYmVsLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGZ1ZWw6e1xuICAgICAgICAgICAgdHlwZTpjYy5Qcm9ncmVzc0JhcixcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBmdWVsbnVtOntcbiAgICAgICAgICAgIHR5cGU6Y2MuTGFiZWwsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgZnVlbGNsb2NrOntcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBmdWVsY2xvY2tudW1iZXI6e1xuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbCxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBwYXNzZW5nZXI6e1xuICAgICAgICAgICAgdHlwZTpjYy5Qcm9ncmVzc0JhcixcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBwYXNzZW5nZXJudW06e1xuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbCxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBwYXNzZW5nZXJjbG9jazp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgcGFzc2VuZ2VyY2xvY2tudW1iZXI6e1xuICAgICAgICAgICAgdHlwZTpjYy5MYWJlbCxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBjb2luczp7XG4gICAgICAgICAgICB0eXBlOmNjLkxhYmVsLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIG1heGZ1ZWw6Y2MuSW50ZWdlcixcbiAgICAgICAgbWF4cGFzc2VuZ2VyOmNjLkludGVnZXIsXG4gICAgICAgIGFsbGNsb2NrOk9iamVjdCxcbiAgICAgICAgdGltZTpjYy5JbnRlZ2VyLFxuXG4gICAgfSxcblxuICAgIC8vIExJRkUtQ1lDTEUgQ0FMTEJBQ0tTOlxuXG4gICAgb25Mb2FkICgpIHtcbiAgICAgICAgdGhpcy5ub2RlLm9wYWNpdHkgPSAwO1xuICAgICAgICB0aGlzLnVzZXJpZCA9IGNjLnN5cy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImlkXCIpO1xuICAgICAgICB0aGlzLmFsbGNsb2NrID0ge1xuICAgICAgICAgICAgZnVlbGNsb2NrIDoge1xuICAgICAgICAgICAgICAgIHJ1bnN0YXRlOmZhbHNlLFxuICAgICAgICAgICAgICAgIHRpbWVudW1iZXI6MFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3NlbmdlcmNsb2NrIDoge1xuICAgICAgICAgICAgICAgIHJ1bnN0YXRlOmZhbHNlLFxuICAgICAgICAgICAgICAgIHRpbWVudW1iZXI6MFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB1c2VyZGF0YS5sZWZ0cyA9IHtcbiAgICAgICAgICAgIGxlZnRmdWVsOjAsXG4gICAgICAgICAgICBsZWZ0cGFzc2VuZ2VyOjBcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5ld3VzZXIoKTtcbiAgICAgICAgdGhpcy5iYWNrdG9nYW1lKGNjLnN5cy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInN0YXJzXCIpKTtcbiAgICB9LFxuXG4gICAgc3RhcnQgKCkge1xuICAgICAgICB0aGlzLm5vZGUucnVuQWN0aW9uKGNjLmZhZGVJbigxLjApKTtcbiAgICAgICAgdGhpcy5zdGFydGNsb2NrKCk7XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlIChkdCkge1xuICAgICAgICB0aGlzLnNob3dtYXAoKTtcbiAgICB9LFxuXG4gICAgbmV3dXNlcjpmdW5jdGlvbigpe1xuICAgICAgICBpZih0aGlzLnVzZXJpZD09bnVsbCl7XG4gICAgICAgICAgICBjYy5kaXJlY3Rvci5sb2FkU2NlbmUoXCJob21lcGFnZV9zY2VuZVwiKTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLmluaXRzKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZG93bmxvYWRVc2VyRGF0YTpmdW5jdGlvbigpe1xuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCBcImh0dHBzOi8vMTQwLjE0My4xMjYuNzMvYW1hemluZ19haXJwb3J0L2FtYXppbmdfYWlycG9ydC5waHA/bW9kdWxlPTFcIiwgdHJ1ZSk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgIHhoci5zZW5kKFwiaWQ9XCIgKyB0aGlzLnVzZXJpZCk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVGV4dCAhPSAwKXtcbiAgICAgICAgICAgICAgICAgICAgdXNlcmRhdGEuYWxsZmlsZSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwbG9hZFVzZXJEYXRhOmZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIFwiaHR0cHM6Ly8xNDAuMTQzLjEyNi43My9hbWF6aW5nX2FpcnBvcnQvYW1hemluZ19haXJwb3J0LnBocD9tb2R1bGU9MlwiLCB0cnVlKTtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LXR5cGVcIixcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKTtcbiAgICAgICAgeGhyLnNlbmQoXCJpZD1cIiArIHRoaXMudXNlcmlkICsgXCImdXNlckRhdGE9XCIgKyBKU09OLnN0cmluZ2lmeSh1c2VyZGF0YS5hbGxmaWxlKSk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkpIHtcbiAgICAgICAgICAgICAgICBpZih4aHIucmVzcG9uc2VUZXh0ID09IDEpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgZG93bmxvYWRBaXJwbGFuZURhdGE6ZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihcIlBPU1RcIiwgXCJodHRwczovLzE0MC4xNDMuMTI2LjczL2FtYXppbmdfYWlycG9ydC9hbWF6aW5nX2FpcnBvcnQucGhwP21vZHVsZT0zXCIsIHRydWUpO1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtdHlwZVwiLFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpO1xuICAgICAgICB4aHIuc2VuZChcImlkPVwiICsgdGhpcy51c2VyaWQpO1xuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQgJiYgKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCA0MDApKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQgIT0gMCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBldmFsKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWlycGxhbmVsaXN0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSBpbiByZXMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgYWlycGxhbmVsaXN0LnB1c2gocmVzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB1c2VyZGF0YS5haXJwbGFuZWRhdGEgPSBhaXJwbGFuZWxpc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHVwbG9hZEFpcnBsYW5lRGF0YTpmdW5jdGlvbigpe1xuICAgICAgICB2YXIgbGlzdCA9IFtdO1xuICAgICAgICBmb3IodmFyIGkgaW4gdXNlcmRhdGEuYWlycGxhbmVkYXRhKXtcbiAgICAgICAgICAgIGxpc3QucHVzaChKU09OLnN0cmluZ2lmeSh1c2VyZGF0YS5haXJwbGFuZWRhdGFbaV0pKVxuICAgICAgICB9XG4gICAgICAgIHZhciBkYXRhID0gXCJbXCIgKyBsaXN0LmpvaW4oJywnKSArIFwiXVwiO1xuICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCBcImh0dHBzOi8vMTQwLjE0My4xMjYuNzMvYW1hemluZ19haXJwb3J0L2FtYXppbmdfYWlycG9ydC5waHA/bW9kdWxlPTRcIiwgdHJ1ZSk7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgIHhoci5zZW5kKFwiaWQ9XCIgKyB0aGlzLnVzZXJpZCArIFwiJnVzZXJEYXRhPVwiICsgZGF0YSk7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT0gNCAmJiAoeGhyLnN0YXR1cyA+PSAyMDAgJiYgeGhyLnN0YXR1cyA8IDQwMCkpIHtcbiAgICAgICAgICAgICAgICBpZih4aHIucmVzcG9uc2VUZXh0ID09IDEpe1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgYmFja3RvZ2FtZTpmdW5jdGlvbihzdGFycyl7XG4gICAgICAgIHZhciBtYXhmdWVsID0gc3RhcnMgKyAxMDtcbiAgICAgICAgdmFyIG1heHBhc3NlbmdlciA9IHN0YXJzICogMiArIDIwO1xuICAgICAgICB2YXIgbGVhdmV0aW1lID0gKERhdGUucGFyc2UobmV3IERhdGUoKSkgLSBjYy5zeXMubG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0aW1lXCIpKS8xMDAwO1xuICAgICAgICB2YXIgbGVmdCA9IEpTT04ucGFyc2UoY2Muc3lzLmxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibGVmdHNcIikpO1xuICAgICAgICBpZihsZWZ0LmxlZnRmdWVsID49IG1heGZ1ZWwpe1xuICAgICAgICAgICAgdXNlcmRhdGEubGVmdHMubGVmdGZ1ZWwgPSBsZWZ0LmxlZnRmdWVsO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHZhciBhZGQgPSBNYXRoLmZsb29yKGxlYXZldGltZS82MCkgKyBsZWZ0LmxlZnRmdWVsO1xuICAgICAgICAgICAgaWYoYWRkID49IG1heGZ1ZWwpe1xuICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsID0gbWF4ZnVlbDtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsID0gYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmKGxlZnQubGVmdHBhc3NlbmdlciA+PSBtYXhwYXNzZW5nZXIpe1xuICAgICAgICAgICAgdXNlcmRhdGEubGVmdHMubGVmdHBhc3NlbmdlciA9IGxlZnQubGVmdHBhc3NlbmdlcjtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB2YXIgYWRkID0gTWF0aC5mbG9vcihsZWF2ZXRpbWUvNjApICsgbGVmdC5sZWZ0cGFzc2VuZ2VyO1xuICAgICAgICAgICAgaWYoYWRkID49IG1heHBhc3Nlbmdlcil7XG4gICAgICAgICAgICAgICAgdXNlcmRhdGEubGVmdHMubGVmdHBhc3NlbmdlciA9IG1heHBhc3NlbmdlcjtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRwYXNzZW5nZXIgPSBhZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2Muc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibGVmdHNcIixKU09OLnN0cmluZ2lmeSh1c2VyZGF0YS5sZWZ0cykpO1xuICAgIH0sXG5cbiAgICBpbml0czpmdW5jdGlvbigpe1xuICAgICAgICB0aGlzLmRvd25sb2FkVXNlckRhdGEoKTtcbiAgICAgICAgdGhpcy5kb3dubG9hZEFpcnBsYW5lRGF0YSgpO1xuICAgIH0sXG5cbiAgICBzaG93bWFwOmZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMucnVud2F5LmdldENoaWxkQnlOYW1lKFwidXBcIikuZ2V0Q2hpbGRCeU5hbWUodXNlcmRhdGEuYWxsZmlsZS5idWlsZGluZ3MudXBydW53YXkudG9TdHJpbmcoKSkuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5ydW53YXkuZ2V0Q2hpbGRCeU5hbWUoXCJkb3duXCIpLmdldENoaWxkQnlOYW1lKHVzZXJkYXRhLmFsbGZpbGUuYnVpbGRpbmdzLmRvd25ydW53YXkudG9TdHJpbmcoKSkuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgaWYodXNlcmRhdGEuYWxsZmlsZS5idWlsZGluZ3MudXBydW53YXk+PTkmJnVzZXJkYXRhLmFsbGZpbGUuYnVpbGRpbmdzLmRvd25ydW53YXk+PTkpe1xuICAgICAgICAgICAgdGhpcy5yb2FkLmdldENoaWxkQnlOYW1lKFwiOS05XCIpLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1lbHNlIGlmKHVzZXJkYXRhLmFsbGZpbGUuYnVpbGRpbmdzLnVwcnVud2F5Pj02JiZ1c2VyZGF0YS5hbGxmaWxlLmJ1aWxkaW5ncy5kb3ducnVud2F5Pj02KXtcbiAgICAgICAgICAgIHRoaXMucm9hZC5nZXRDaGlsZEJ5TmFtZShcIjYtNlwiKS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9ZWxzZSBpZih1c2VyZGF0YS5hbGxmaWxlLmJ1aWxkaW5ncy51cHJ1bndheT49MyYmdXNlcmRhdGEuYWxsZmlsZS5idWlsZGluZ3MuZG93bnJ1bndheT49Myl7XG4gICAgICAgICAgICB0aGlzLnJvYWQuZ2V0Q2hpbGRCeU5hbWUoXCIzLTNcIikuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICB0aGlzLnJvYWQuZ2V0Q2hpbGRCeU5hbWUoXCIxLTFcIikuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0YW5kLmdldENoaWxkQnlOYW1lKHVzZXJkYXRhLmFsbGZpbGUuYnVpbGRpbmdzLnN0YW5kLnRvU3RyaW5nKCkpLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMudXNlcm5hbWUuc3RyaW5nID0gdXNlcmRhdGEuYWxsZmlsZS5uYW1lO1xuICAgICAgICB0aGlzLnN0YXJzLnN0cmluZyA9IHVzZXJkYXRhLmFsbGZpbGUuc3RhcnM7XG4gICAgICAgIHRoaXMuY29pbnMuc3RyaW5nID0gdXNlcmRhdGEuYWxsZmlsZS5tb25leTtcbiAgICAgICAgdGhpcy5tYXhmdWVsID0gdXNlcmRhdGEuYWxsZmlsZS5zdGFycyArIDEwO1xuICAgICAgICB0aGlzLm1heHBhc3NlbmdlciA9IHVzZXJkYXRhLmFsbGZpbGUuc3RhcnMgKiAyICsgMjA7XG4gICAgICAgIHRoaXMuZnVlbC5wcm9ncmVzcyA9IHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsIC8gdGhpcy5tYXhmdWVsO1xuICAgICAgICB0aGlzLmZ1ZWxudW0uc3RyaW5nID0gdXNlcmRhdGEubGVmdHMubGVmdGZ1ZWwudG9TdHJpbmcoKSArIFwiL1wiICsgdGhpcy5tYXhmdWVsLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMucGFzc2VuZ2VyLnByb2dyZXNzID0gdXNlcmRhdGEubGVmdHMubGVmdHBhc3NlbmdlciAvIHRoaXMubWF4cGFzc2VuZ2VyO1xuICAgICAgICB0aGlzLnBhc3Nlbmdlcm51bS5zdHJpbmcgPSB1c2VyZGF0YS5sZWZ0cy5sZWZ0cGFzc2VuZ2VyLnRvU3RyaW5nKCkgKyBcIi9cIiArIHRoaXMubWF4cGFzc2VuZ2VyLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmICh1c2VyZGF0YS5sZWZ0cy5sZWZ0ZnVlbCA8IHRoaXMubWF4ZnVlbCAmJiB0aGlzLmFsbGNsb2NrLmZ1ZWxjbG9jay5ydW5zdGF0ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICB0aGlzLmFsbGNsb2NrLmZ1ZWxjbG9jay5ydW5zdGF0ZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZ1ZWxjbG9jay5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1c2VyZGF0YS5sZWZ0cy5sZWZ0cGFzc2VuZ2VyIDwgdGhpcy5tYXhwYXNzZW5nZXIgJiYgdGhpcy5hbGxjbG9jay5wYXNzZW5nZXJjbG9jay5ydW5zdGF0ZSA9PSBmYWxzZSl7XG4gICAgICAgICAgICB0aGlzLmFsbGNsb2NrLnBhc3NlbmdlcmNsb2NrLnJ1bnN0YXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucGFzc2VuZ2VyY2xvY2suYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IodmFyIG8gaW4gdXNlcmRhdGEuYWlycGxhbmVkYXRhKXtcbiAgICAgICAgICAgIGlmKHVzZXJkYXRhLmFpcnBsYW5lZGF0YVtvXS5pc2ZseWluZz09J2ZhbHNlJyl7XG4gICAgICAgICAgICAgICAgdGhpcy5haXJwbGFuZU9uU3RhbmQuZ2V0Q2hpbGRCeU5hbWUoby50b1N0cmluZygpKS5nZXRDaGlsZEJ5TmFtZSh1c2VyZGF0YS5haXJwbGFuZWRhdGFbb10ubGV2ZWwudG9TdHJpbmcoKSkuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzdGFydGNsb2NrOmZ1bmN0aW9uKCl7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgY2Muc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGltZVwiLERhdGUucGFyc2UobmV3IERhdGUoKSkpO1xuICAgICAgICAgICAgaWYodGhpcy5hbGxjbG9jay5mdWVsY2xvY2sucnVuc3RhdGU9PXRydWUpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsY2xvY2suZnVlbGNsb2NrLnRpbWVudW1iZXIgKz0gMTtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmFsbGNsb2NrLmZ1ZWxjbG9jay50aW1lbnVtYmVyID09IDYwKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxjbG9jay5mdWVsY2xvY2sudGltZW51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHRoaXMuYWxsY2xvY2suZnVlbGNsb2NrLnRpbWVudW1iZXI8MTApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZ1ZWxjbG9ja251bWJlci5zdHJpbmcgPSBcIjBcIiArIHRoaXMuYWxsY2xvY2suZnVlbGNsb2NrLnRpbWVudW1iZXIudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mdWVsY2xvY2tudW1iZXIuc3RyaW5nID0gdGhpcy5hbGxjbG9jay5mdWVsY2xvY2sudGltZW51bWJlci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih1c2VyZGF0YS5sZWZ0cy5sZWZ0ZnVlbD49dGhpcy5tYXhmdWVsKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxjbG9jay5mdWVsY2xvY2sucnVuc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxjbG9jay5mdWVsY2xvY2sudGltZW51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZnVlbGNsb2NrLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sucnVuc3RhdGU9PXRydWUpe1xuICAgICAgICAgICAgICAgIHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sudGltZW51bWJlciArPSAxO1xuICAgICAgICAgICAgICAgIGlmKHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sudGltZW51bWJlciA9PSA2MCl7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sudGltZW51bWJlciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRwYXNzZW5nZXIgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYodGhpcy5hbGxjbG9jay5wYXNzZW5nZXJjbG9jay50aW1lbnVtYmVyPDEwKXtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXNzZW5nZXJjbG9ja251bWJlci5zdHJpbmcgPSBcIjBcIiArIHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sudGltZW51bWJlci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhc3NlbmdlcmNsb2NrbnVtYmVyLnN0cmluZyA9IHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sudGltZW51bWJlci50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZih1c2VyZGF0YS5sZWZ0cy5sZWZ0cGFzc2VuZ2VyPj10aGlzLm1heHBhc3Nlbmdlcil7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsY2xvY2sucGFzc2VuZ2VyY2xvY2sucnVuc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxjbG9jay5wYXNzZW5nZXJjbG9jay50aW1lbnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXNzZW5nZXJjbG9jay5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih0aGlzLnRpbWUgPT0gNjApe1xuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkVXNlckRhdGEoKTtcbiAgICAgICAgICAgICAgICBjYy5zeXMubG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsZWZ0c1wiLEpTT04uc3RyaW5naWZ5KHVzZXJkYXRhLmxlZnRzKSk7XG4gICAgICAgICAgICAgICAgY2Muc3lzLmxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic3RhcnNcIix1c2VyZGF0YS5hbGxmaWxlLnN0YXJzKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgPT0gMFxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgdGhpcy50aW1lICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZShmdW5jdGlvbigpe1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xuICAgICAgICB9LDEpXG4gICAgfSxcbn0pOyJdfQ==