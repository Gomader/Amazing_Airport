
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/script/button_events.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd4201dx8t5KJ4AqSM5Q3YV2', 'button_events');
// script/button_events.js

"use strict";

// Learn cc.Class:
//  - https://docs.cocos.com/creator/manual/en/scripting/class.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var userdata = require('userdata');

cc.Class({
  "extends": cc.Component,
  properties: {
    my_flights_window: {
      type: cc.Node,
      "default": null
    },
    warehouse_window: {
      type: cc.Node,
      "default": null
    },
    activeflights: {
      type: cc.Node,
      "default": null
    },
    flights: {
      type: cc.Node,
      "default": null
    },
    shop_window: {
      type: cc.Node,
      "default": null
    },
    buildings_window: {
      type: cc.Node,
      "default": null
    },
    business_flights_window: {
      type: cc.Node,
      "default": null
    },
    setting_windows: {
      type: cc.Node,
      "default": null
    },
    warning_window: {
      type: cc.Node,
      "default": null
    },
    window: {
      type: cc.Node,
      "default": null
    }
  },
  // LIFE-CYCLE CALLBACKS:
  onLoad: function onLoad() {},
  start: function start() {},
  update: function update(dt) {},
  showallflights: function showallflights() {
    this.hide();
    var a = cc.instantiate(this.my_flights_window);
    a.active = true;
    a.getChildByName("active").active = false;
    a.getChildByName("inner").active = true;
    this.window.addChild(a);
  },
  showflying: function showflying() {
    this.hide();
    var a = cc.instantiate(this.my_flights_window);
    a.active = true;
    a.getChildByName("active").active = true;
    a.getChildByName("inner").active = false;
    this.window.addChild(a);
  },
  showwarehouse: function showwarehouse() {
    this.hide();
    var a = cc.instantiate(this.warehouse_window);
    a.active = true;
    this.window.addChild(a);
  },
  fly: function fly(event, customEventData) {
    this.hide();
    var go = 0;

    if (userdata.lefts.leftfuel >= customEventData.fuel && userdata.lefts.leftpassenger >= customEventData.passenger) {
      for (var o in userdata.airplanedata) {
        if (userdata.airplanedata[o].level == customEventData.level && userdata.airplanedata[o].isflying == 'false') {
          userdata.airplanedata[o].isflying = 'true';
          userdata.airplanedata[o].destination = customEventData.name;
          userdata.airplanedata[o].reward = customEventData.reward;
          userdata.airplanedata[o].endtime = Date.parse(new Date()) / 1000 + customEventData.time;
          userdata.lefts.leftfuel -= customEventData.fuel;
          userdata.lefts.leftpassenger -= customEventData.passenger;

          if (userdata.achievement[customEventData.id][1] == 3) {
            console.log("r");
          } else {
            userdata.achievement[customEventData.id][0] += 1;

            if (userdata.achievement[customEventData.id][0] == 10) {
              userdata.achievement[customEventData.id][1] += 1;
              userdata.allfile.stars += 1;
              userdata.achievement[customEventData.id][0] = 0;
            }
          }

          go = 1;
          break;
        }
      }
    }

    if (go == 0) {
      if (userdata.lefts.leftfuel < customEventData.fuel || userdata.lefts.leftpassenger < customEventData.passenger) {
        var inner = 'Do not have enough fuel or passengers';
        this.showwarning(inner);
      } else {
        var _inner = 'Do not have an avilable plane of the required type.\nBuy a new plane or wait for the current flights to return.';
        this.showwarning(_inner);
      }
    }
  },
  toactive: function toactive() {
    this.window.getChildByName("My_flights_window").getChildByName("active").active = true;
    this.window.getChildByName("My_flights_window").getChildByName("inner").active = false;
  },
  toflightlist: function toflightlist() {
    this.window.getChildByName("My_flights_window").getChildByName("active").active = false;
    this.window.getChildByName("My_flights_window").getChildByName("inner").active = true;
  },
  showwarning: function showwarning(inner) {
    this.warning_window.getChildByName("warning_window").getChildByName("inner").getComponent(cc.Label).string = inner;
    var a = cc.instantiate(warning_window);
    a.active = true;
    this.window.addChild(a);
  },
  showsetting: function showsetting() {
    this.hide();
    var a = cc.instantiate(this.setting_windows);
    a.active = true;
    this.window.addChild(a);
  },
  showshop: function showshop() {
    this.hide();
    var a = cc.instantiate(this.shop_window);
    a.active = true;
    this.window.addChild(a);
  },
  showbuildings: function showbuildings() {
    this.hide();
    var a = cc.instantiate(this.buildings_window);
    a.active = true;
    this.window.addChild(a);
  },
  showbusiness: function showbusiness() {
    this.hide();
    var a = cc.instantiate(this.business_flights_window);
    a.active = true;
    this.window.addChild(a);
  },
  hide: function hide() {
    this.window.destroyAllChildren();
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHQvYnV0dG9uX2V2ZW50cy5qcyJdLCJuYW1lcyI6WyJ1c2VyZGF0YSIsInJlcXVpcmUiLCJjYyIsIkNsYXNzIiwiQ29tcG9uZW50IiwicHJvcGVydGllcyIsIm15X2ZsaWdodHNfd2luZG93IiwidHlwZSIsIk5vZGUiLCJ3YXJlaG91c2Vfd2luZG93IiwiYWN0aXZlZmxpZ2h0cyIsImZsaWdodHMiLCJzaG9wX3dpbmRvdyIsImJ1aWxkaW5nc193aW5kb3ciLCJidXNpbmVzc19mbGlnaHRzX3dpbmRvdyIsInNldHRpbmdfd2luZG93cyIsIndhcm5pbmdfd2luZG93Iiwid2luZG93Iiwib25Mb2FkIiwic3RhcnQiLCJ1cGRhdGUiLCJkdCIsInNob3dhbGxmbGlnaHRzIiwiaGlkZSIsImEiLCJpbnN0YW50aWF0ZSIsImFjdGl2ZSIsImdldENoaWxkQnlOYW1lIiwiYWRkQ2hpbGQiLCJzaG93Zmx5aW5nIiwic2hvd3dhcmVob3VzZSIsImZseSIsImV2ZW50IiwiY3VzdG9tRXZlbnREYXRhIiwiZ28iLCJsZWZ0cyIsImxlZnRmdWVsIiwiZnVlbCIsImxlZnRwYXNzZW5nZXIiLCJwYXNzZW5nZXIiLCJvIiwiYWlycGxhbmVkYXRhIiwibGV2ZWwiLCJpc2ZseWluZyIsImRlc3RpbmF0aW9uIiwibmFtZSIsInJld2FyZCIsImVuZHRpbWUiLCJEYXRlIiwicGFyc2UiLCJ0aW1lIiwiYWNoaWV2ZW1lbnQiLCJpZCIsImNvbnNvbGUiLCJsb2ciLCJhbGxmaWxlIiwic3RhcnMiLCJpbm5lciIsInNob3d3YXJuaW5nIiwidG9hY3RpdmUiLCJ0b2ZsaWdodGxpc3QiLCJnZXRDb21wb25lbnQiLCJMYWJlbCIsInN0cmluZyIsInNob3dzZXR0aW5nIiwic2hvd3Nob3AiLCJzaG93YnVpbGRpbmdzIiwic2hvd2J1c2luZXNzIiwiZGVzdHJveUFsbENoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBdEI7O0FBRUFDLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTO0FBQ0wsYUFBU0QsRUFBRSxDQUFDRSxTQURQO0FBR0xDLEVBQUFBLFVBQVUsRUFBRTtBQUNSQyxJQUFBQSxpQkFBaUIsRUFBQztBQUNkQyxNQUFBQSxJQUFJLEVBQUNMLEVBQUUsQ0FBQ00sSUFETTtBQUVkLGlCQUFRO0FBRk0sS0FEVjtBQUtSQyxJQUFBQSxnQkFBZ0IsRUFBQztBQUNiRixNQUFBQSxJQUFJLEVBQUNMLEVBQUUsQ0FBQ00sSUFESztBQUViLGlCQUFRO0FBRkssS0FMVDtBQVNSRSxJQUFBQSxhQUFhLEVBQUM7QUFDVkgsTUFBQUEsSUFBSSxFQUFDTCxFQUFFLENBQUNNLElBREU7QUFFVixpQkFBUTtBQUZFLEtBVE47QUFhUkcsSUFBQUEsT0FBTyxFQUFDO0FBQ0pKLE1BQUFBLElBQUksRUFBQ0wsRUFBRSxDQUFDTSxJQURKO0FBRUosaUJBQVE7QUFGSixLQWJBO0FBaUJSSSxJQUFBQSxXQUFXLEVBQUM7QUFDUkwsTUFBQUEsSUFBSSxFQUFDTCxFQUFFLENBQUNNLElBREE7QUFFUixpQkFBUTtBQUZBLEtBakJKO0FBcUJSSyxJQUFBQSxnQkFBZ0IsRUFBQztBQUNiTixNQUFBQSxJQUFJLEVBQUNMLEVBQUUsQ0FBQ00sSUFESztBQUViLGlCQUFRO0FBRkssS0FyQlQ7QUF5QlJNLElBQUFBLHVCQUF1QixFQUFDO0FBQ3BCUCxNQUFBQSxJQUFJLEVBQUNMLEVBQUUsQ0FBQ00sSUFEWTtBQUVwQixpQkFBUTtBQUZZLEtBekJoQjtBQTZCUk8sSUFBQUEsZUFBZSxFQUFDO0FBQ1pSLE1BQUFBLElBQUksRUFBQ0wsRUFBRSxDQUFDTSxJQURJO0FBRVosaUJBQVE7QUFGSSxLQTdCUjtBQWlDUlEsSUFBQUEsY0FBYyxFQUFDO0FBQ1hULE1BQUFBLElBQUksRUFBQ0wsRUFBRSxDQUFDTSxJQURHO0FBRVgsaUJBQVE7QUFGRyxLQWpDUDtBQXFDUlMsSUFBQUEsTUFBTSxFQUFDO0FBQ0hWLE1BQUFBLElBQUksRUFBQ0wsRUFBRSxDQUFDTSxJQURMO0FBRUgsaUJBQVE7QUFGTDtBQXJDQyxHQUhQO0FBOENMO0FBRUFVLEVBQUFBLE1BaERLLG9CQWdESyxDQUVULENBbERJO0FBb0RMQyxFQUFBQSxLQXBESyxtQkFvREksQ0FFUixDQXRESTtBQXdETEMsRUFBQUEsTUF4REssa0JBd0RHQyxFQXhESCxFQXdETyxDQUVYLENBMURJO0FBMkRMQyxFQUFBQSxjQTNESyw0QkEyRFc7QUFDWixTQUFLQyxJQUFMO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHdEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlLEtBQUtuQixpQkFBcEIsQ0FBUjtBQUNBa0IsSUFBQUEsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsSUFBWDtBQUNBRixJQUFBQSxDQUFDLENBQUNHLGNBQUYsQ0FBaUIsUUFBakIsRUFBMkJELE1BQTNCLEdBQW9DLEtBQXBDO0FBQ0FGLElBQUFBLENBQUMsQ0FBQ0csY0FBRixDQUFpQixPQUFqQixFQUEwQkQsTUFBMUIsR0FBbUMsSUFBbkM7QUFDQSxTQUFLVCxNQUFMLENBQVlXLFFBQVosQ0FBcUJKLENBQXJCO0FBQ0gsR0FsRUk7QUFtRUxLLEVBQUFBLFVBbkVLLHdCQW1FTztBQUNSLFNBQUtOLElBQUw7QUFDQSxRQUFJQyxDQUFDLEdBQUd0QixFQUFFLENBQUN1QixXQUFILENBQWUsS0FBS25CLGlCQUFwQixDQUFSO0FBQ0FrQixJQUFBQSxDQUFDLENBQUNFLE1BQUYsR0FBVyxJQUFYO0FBQ0FGLElBQUFBLENBQUMsQ0FBQ0csY0FBRixDQUFpQixRQUFqQixFQUEyQkQsTUFBM0IsR0FBb0MsSUFBcEM7QUFDQUYsSUFBQUEsQ0FBQyxDQUFDRyxjQUFGLENBQWlCLE9BQWpCLEVBQTBCRCxNQUExQixHQUFtQyxLQUFuQztBQUNBLFNBQUtULE1BQUwsQ0FBWVcsUUFBWixDQUFxQkosQ0FBckI7QUFDSCxHQTFFSTtBQTJFTE0sRUFBQUEsYUEzRUssMkJBMkVVO0FBQ1gsU0FBS1AsSUFBTDtBQUNBLFFBQUlDLENBQUMsR0FBR3RCLEVBQUUsQ0FBQ3VCLFdBQUgsQ0FBZSxLQUFLaEIsZ0JBQXBCLENBQVI7QUFDQWUsSUFBQUEsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsSUFBWDtBQUNBLFNBQUtULE1BQUwsQ0FBWVcsUUFBWixDQUFxQkosQ0FBckI7QUFDSCxHQWhGSTtBQWlGTE8sRUFBQUEsR0FBRyxFQUFDLGFBQVNDLEtBQVQsRUFBZUMsZUFBZixFQUErQjtBQUMvQixTQUFLVixJQUFMO0FBQ0EsUUFBSVcsRUFBRSxHQUFHLENBQVQ7O0FBQ0EsUUFBR2xDLFFBQVEsQ0FBQ21DLEtBQVQsQ0FBZUMsUUFBZixJQUF5QkgsZUFBZSxDQUFDSSxJQUF6QyxJQUErQ3JDLFFBQVEsQ0FBQ21DLEtBQVQsQ0FBZUcsYUFBZixJQUE4QkwsZUFBZSxDQUFDTSxTQUFoRyxFQUEwRztBQUN0RyxXQUFJLElBQUlDLENBQVIsSUFBYXhDLFFBQVEsQ0FBQ3lDLFlBQXRCLEVBQW1DO0FBQy9CLFlBQUd6QyxRQUFRLENBQUN5QyxZQUFULENBQXNCRCxDQUF0QixFQUF5QkUsS0FBekIsSUFBZ0NULGVBQWUsQ0FBQ1MsS0FBaEQsSUFBeUQxQyxRQUFRLENBQUN5QyxZQUFULENBQXNCRCxDQUF0QixFQUF5QkcsUUFBekIsSUFBbUMsT0FBL0YsRUFBdUc7QUFDbkczQyxVQUFBQSxRQUFRLENBQUN5QyxZQUFULENBQXNCRCxDQUF0QixFQUF5QkcsUUFBekIsR0FBb0MsTUFBcEM7QUFDQTNDLFVBQUFBLFFBQVEsQ0FBQ3lDLFlBQVQsQ0FBc0JELENBQXRCLEVBQXlCSSxXQUF6QixHQUF1Q1gsZUFBZSxDQUFDWSxJQUF2RDtBQUNBN0MsVUFBQUEsUUFBUSxDQUFDeUMsWUFBVCxDQUFzQkQsQ0FBdEIsRUFBeUJNLE1BQXpCLEdBQWtDYixlQUFlLENBQUNhLE1BQWxEO0FBQ0E5QyxVQUFBQSxRQUFRLENBQUN5QyxZQUFULENBQXNCRCxDQUF0QixFQUF5Qk8sT0FBekIsR0FBbUNDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLElBQUlELElBQUosRUFBWCxJQUF1QixJQUF2QixHQUE4QmYsZUFBZSxDQUFDaUIsSUFBakY7QUFDQWxELFVBQUFBLFFBQVEsQ0FBQ21DLEtBQVQsQ0FBZUMsUUFBZixJQUEyQkgsZUFBZSxDQUFDSSxJQUEzQztBQUNBckMsVUFBQUEsUUFBUSxDQUFDbUMsS0FBVCxDQUFlRyxhQUFmLElBQWdDTCxlQUFlLENBQUNNLFNBQWhEOztBQUNBLGNBQUd2QyxRQUFRLENBQUNtRCxXQUFULENBQXFCbEIsZUFBZSxDQUFDbUIsRUFBckMsRUFBeUMsQ0FBekMsS0FBNkMsQ0FBaEQsRUFBa0Q7QUFDOUNDLFlBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLEdBQVo7QUFDSCxXQUZELE1BRUs7QUFDRHRELFlBQUFBLFFBQVEsQ0FBQ21ELFdBQVQsQ0FBcUJsQixlQUFlLENBQUNtQixFQUFyQyxFQUF5QyxDQUF6QyxLQUErQyxDQUEvQzs7QUFDQSxnQkFBR3BELFFBQVEsQ0FBQ21ELFdBQVQsQ0FBcUJsQixlQUFlLENBQUNtQixFQUFyQyxFQUF5QyxDQUF6QyxLQUE2QyxFQUFoRCxFQUFtRDtBQUMvQ3BELGNBQUFBLFFBQVEsQ0FBQ21ELFdBQVQsQ0FBcUJsQixlQUFlLENBQUNtQixFQUFyQyxFQUF5QyxDQUF6QyxLQUE2QyxDQUE3QztBQUNBcEQsY0FBQUEsUUFBUSxDQUFDdUQsT0FBVCxDQUFpQkMsS0FBakIsSUFBMEIsQ0FBMUI7QUFDQXhELGNBQUFBLFFBQVEsQ0FBQ21ELFdBQVQsQ0FBcUJsQixlQUFlLENBQUNtQixFQUFyQyxFQUF5QyxDQUF6QyxJQUE4QyxDQUE5QztBQUNIO0FBQ0o7O0FBQ0RsQixVQUFBQSxFQUFFLEdBQUcsQ0FBTDtBQUNBO0FBQ0g7QUFDSjtBQUNKOztBQUNELFFBQUdBLEVBQUUsSUFBSSxDQUFULEVBQVc7QUFDUCxVQUFHbEMsUUFBUSxDQUFDbUMsS0FBVCxDQUFlQyxRQUFmLEdBQXdCSCxlQUFlLENBQUNJLElBQXhDLElBQThDckMsUUFBUSxDQUFDbUMsS0FBVCxDQUFlRyxhQUFmLEdBQTZCTCxlQUFlLENBQUNNLFNBQTlGLEVBQXdHO0FBQ3BHLFlBQUlrQixLQUFLLEdBQUcsdUNBQVo7QUFDQSxhQUFLQyxXQUFMLENBQWlCRCxLQUFqQjtBQUNILE9BSEQsTUFHSztBQUNELFlBQUlBLE1BQUssR0FBRyxpSEFBWjtBQUNBLGFBQUtDLFdBQUwsQ0FBaUJELE1BQWpCO0FBQ0g7QUFDSjtBQUNKLEdBckhJO0FBdUhMRSxFQUFBQSxRQXZISyxzQkF1SEs7QUFDTixTQUFLMUMsTUFBTCxDQUFZVSxjQUFaLENBQTJCLG1CQUEzQixFQUFnREEsY0FBaEQsQ0FBK0QsUUFBL0QsRUFBeUVELE1BQXpFLEdBQWtGLElBQWxGO0FBQ0EsU0FBS1QsTUFBTCxDQUFZVSxjQUFaLENBQTJCLG1CQUEzQixFQUFnREEsY0FBaEQsQ0FBK0QsT0FBL0QsRUFBd0VELE1BQXhFLEdBQWlGLEtBQWpGO0FBQ0gsR0ExSEk7QUE0SExrQyxFQUFBQSxZQTVISywwQkE0SFM7QUFDVixTQUFLM0MsTUFBTCxDQUFZVSxjQUFaLENBQTJCLG1CQUEzQixFQUFnREEsY0FBaEQsQ0FBK0QsUUFBL0QsRUFBeUVELE1BQXpFLEdBQWtGLEtBQWxGO0FBQ0EsU0FBS1QsTUFBTCxDQUFZVSxjQUFaLENBQTJCLG1CQUEzQixFQUFnREEsY0FBaEQsQ0FBK0QsT0FBL0QsRUFBd0VELE1BQXhFLEdBQWlGLElBQWpGO0FBQ0gsR0EvSEk7QUFpSUxnQyxFQUFBQSxXQWpJSyx1QkFpSU9ELEtBaklQLEVBaUlhO0FBQ2QsU0FBS3pDLGNBQUwsQ0FBb0JXLGNBQXBCLENBQW1DLGdCQUFuQyxFQUFxREEsY0FBckQsQ0FBb0UsT0FBcEUsRUFBNkVrQyxZQUE3RSxDQUEwRjNELEVBQUUsQ0FBQzRELEtBQTdGLEVBQW9HQyxNQUFwRyxHQUE2R04sS0FBN0c7QUFDQSxRQUFJakMsQ0FBQyxHQUFHdEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlVCxjQUFmLENBQVI7QUFDQVEsSUFBQUEsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsSUFBWDtBQUNBLFNBQUtULE1BQUwsQ0FBWVcsUUFBWixDQUFxQkosQ0FBckI7QUFDSCxHQXRJSTtBQXVJTHdDLEVBQUFBLFdBdklLLHlCQXVJUTtBQUNULFNBQUt6QyxJQUFMO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHdEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlLEtBQUtWLGVBQXBCLENBQVI7QUFDQVMsSUFBQUEsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsSUFBWDtBQUNBLFNBQUtULE1BQUwsQ0FBWVcsUUFBWixDQUFxQkosQ0FBckI7QUFDSCxHQTVJSTtBQTZJTHlDLEVBQUFBLFFBN0lLLHNCQTZJSztBQUNOLFNBQUsxQyxJQUFMO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHdEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlLEtBQUtiLFdBQXBCLENBQVI7QUFDQVksSUFBQUEsQ0FBQyxDQUFDRSxNQUFGLEdBQVcsSUFBWDtBQUNBLFNBQUtULE1BQUwsQ0FBWVcsUUFBWixDQUFxQkosQ0FBckI7QUFDSCxHQWxKSTtBQW1KTDBDLEVBQUFBLGFBbkpLLDJCQW1KVTtBQUNYLFNBQUszQyxJQUFMO0FBQ0EsUUFBSUMsQ0FBQyxHQUFHdEIsRUFBRSxDQUFDdUIsV0FBSCxDQUFlLEtBQUtaLGdCQUFwQixDQUFSO0FBQ0FXLElBQUFBLENBQUMsQ0FBQ0UsTUFBRixHQUFXLElBQVg7QUFDQSxTQUFLVCxNQUFMLENBQVlXLFFBQVosQ0FBcUJKLENBQXJCO0FBQ0gsR0F4Skk7QUF5SkwyQyxFQUFBQSxZQXpKSywwQkF5SlM7QUFDVixTQUFLNUMsSUFBTDtBQUNBLFFBQUlDLENBQUMsR0FBR3RCLEVBQUUsQ0FBQ3VCLFdBQUgsQ0FBZSxLQUFLWCx1QkFBcEIsQ0FBUjtBQUNBVSxJQUFBQSxDQUFDLENBQUNFLE1BQUYsR0FBVyxJQUFYO0FBQ0EsU0FBS1QsTUFBTCxDQUFZVyxRQUFaLENBQXFCSixDQUFyQjtBQUNILEdBOUpJO0FBK0pMRCxFQUFBQSxJQS9KSyxrQkErSkM7QUFDRixTQUFLTixNQUFMLENBQVltRCxrQkFBWjtBQUNIO0FBaktJLENBQVQiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExlYXJuIGNjLkNsYXNzOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvY2xhc3MuaHRtbFxuLy8gTGVhcm4gQXR0cmlidXRlOlxuLy8gIC0gaHR0cHM6Ly9kb2NzLmNvY29zLmNvbS9jcmVhdG9yL21hbnVhbC9lbi9zY3JpcHRpbmcvcmVmZXJlbmNlL2F0dHJpYnV0ZXMuaHRtbFxuLy8gTGVhcm4gbGlmZS1jeWNsZSBjYWxsYmFja3M6XG4vLyAgLSBodHRwczovL2RvY3MuY29jb3MuY29tL2NyZWF0b3IvbWFudWFsL2VuL3NjcmlwdGluZy9saWZlLWN5Y2xlLWNhbGxiYWNrcy5odG1sXG5cbnZhciB1c2VyZGF0YSA9IHJlcXVpcmUoJ3VzZXJkYXRhJyk7XG5cbmNjLkNsYXNzKHtcbiAgICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIG15X2ZsaWdodHNfd2luZG93OntcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICB3YXJlaG91c2Vfd2luZG93OntcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmVmbGlnaHRzOntcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBmbGlnaHRzOntcbiAgICAgICAgICAgIHR5cGU6Y2MuTm9kZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6bnVsbFxuICAgICAgICB9LFxuICAgICAgICBzaG9wX3dpbmRvdzp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgYnVpbGRpbmdzX3dpbmRvdzp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgYnVzaW5lc3NfZmxpZ2h0c193aW5kb3c6e1xuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHNldHRpbmdfd2luZG93czp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfSxcbiAgICAgICAgd2FybmluZ193aW5kb3c6e1xuICAgICAgICAgICAgdHlwZTpjYy5Ob2RlLFxuICAgICAgICAgICAgZGVmYXVsdDpudWxsXG4gICAgICAgIH0sXG4gICAgICAgIHdpbmRvdzp7XG4gICAgICAgICAgICB0eXBlOmNjLk5vZGUsXG4gICAgICAgICAgICBkZWZhdWx0Om51bGxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBMSUZFLUNZQ0xFIENBTExCQUNLUzpcblxuICAgIG9uTG9hZCAoKSB7XG4gICAgICAgIFxuICAgIH0sXG5cbiAgICBzdGFydCAoKSB7XG5cbiAgICB9LFxuXG4gICAgdXBkYXRlIChkdCkge1xuICAgICAgICBcbiAgICB9LFxuICAgIHNob3dhbGxmbGlnaHRzKCl7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICBsZXQgYSA9IGNjLmluc3RhbnRpYXRlKHRoaXMubXlfZmxpZ2h0c193aW5kb3cpO1xuICAgICAgICBhLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGEuZ2V0Q2hpbGRCeU5hbWUoXCJhY3RpdmVcIikuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIGEuZ2V0Q2hpbGRCeU5hbWUoXCJpbm5lclwiKS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLndpbmRvdy5hZGRDaGlsZChhKTtcbiAgICB9LFxuICAgIHNob3dmbHlpbmcoKXtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIGxldCBhID0gY2MuaW5zdGFudGlhdGUodGhpcy5teV9mbGlnaHRzX3dpbmRvdyk7XG4gICAgICAgIGEuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgYS5nZXRDaGlsZEJ5TmFtZShcImFjdGl2ZVwiKS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiaW5uZXJcIikuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMud2luZG93LmFkZENoaWxkKGEpO1xuICAgIH0sXG4gICAgc2hvd3dhcmVob3VzZSgpe1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgbGV0IGEgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLndhcmVob3VzZV93aW5kb3cpO1xuICAgICAgICBhLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMud2luZG93LmFkZENoaWxkKGEpO1xuICAgIH0sXG4gICAgZmx5OmZ1bmN0aW9uKGV2ZW50LGN1c3RvbUV2ZW50RGF0YSl7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB2YXIgZ28gPSAwO1xuICAgICAgICBpZih1c2VyZGF0YS5sZWZ0cy5sZWZ0ZnVlbD49Y3VzdG9tRXZlbnREYXRhLmZ1ZWwmJnVzZXJkYXRhLmxlZnRzLmxlZnRwYXNzZW5nZXI+PWN1c3RvbUV2ZW50RGF0YS5wYXNzZW5nZXIpe1xuICAgICAgICAgICAgZm9yKHZhciBvIGluIHVzZXJkYXRhLmFpcnBsYW5lZGF0YSl7XG4gICAgICAgICAgICAgICAgaWYodXNlcmRhdGEuYWlycGxhbmVkYXRhW29dLmxldmVsPT1jdXN0b21FdmVudERhdGEubGV2ZWwgJiYgdXNlcmRhdGEuYWlycGxhbmVkYXRhW29dLmlzZmx5aW5nPT0nZmFsc2UnKXtcbiAgICAgICAgICAgICAgICAgICAgdXNlcmRhdGEuYWlycGxhbmVkYXRhW29dLmlzZmx5aW5nID0gJ3RydWUnO1xuICAgICAgICAgICAgICAgICAgICB1c2VyZGF0YS5haXJwbGFuZWRhdGFbb10uZGVzdGluYXRpb24gPSBjdXN0b21FdmVudERhdGEubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdXNlcmRhdGEuYWlycGxhbmVkYXRhW29dLnJld2FyZCA9IGN1c3RvbUV2ZW50RGF0YS5yZXdhcmQ7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmFpcnBsYW5lZGF0YVtvXS5lbmR0aW1lID0gRGF0ZS5wYXJzZShuZXcgRGF0ZSgpKS8xMDAwICsgY3VzdG9tRXZlbnREYXRhLnRpbWU7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsIC09IGN1c3RvbUV2ZW50RGF0YS5mdWVsO1xuICAgICAgICAgICAgICAgICAgICB1c2VyZGF0YS5sZWZ0cy5sZWZ0cGFzc2VuZ2VyIC09IGN1c3RvbUV2ZW50RGF0YS5wYXNzZW5nZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmKHVzZXJkYXRhLmFjaGlldmVtZW50W2N1c3RvbUV2ZW50RGF0YS5pZF1bMV09PTMpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyXCIpO1xuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmFjaGlldmVtZW50W2N1c3RvbUV2ZW50RGF0YS5pZF1bMF0gKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHVzZXJkYXRhLmFjaGlldmVtZW50W2N1c3RvbUV2ZW50RGF0YS5pZF1bMF09PTEwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyZGF0YS5hY2hpZXZlbWVudFtjdXN0b21FdmVudERhdGEuaWRdWzFdKz0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJkYXRhLmFsbGZpbGUuc3RhcnMgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyZGF0YS5hY2hpZXZlbWVudFtjdXN0b21FdmVudERhdGEuaWRdWzBdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBnbyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZihnbyA9PSAwKXtcbiAgICAgICAgICAgIGlmKHVzZXJkYXRhLmxlZnRzLmxlZnRmdWVsPGN1c3RvbUV2ZW50RGF0YS5mdWVsfHx1c2VyZGF0YS5sZWZ0cy5sZWZ0cGFzc2VuZ2VyPGN1c3RvbUV2ZW50RGF0YS5wYXNzZW5nZXIpe1xuICAgICAgICAgICAgICAgIGxldCBpbm5lciA9ICdEbyBub3QgaGF2ZSBlbm91Z2ggZnVlbCBvciBwYXNzZW5nZXJzJztcbiAgICAgICAgICAgICAgICB0aGlzLnNob3d3YXJuaW5nKGlubmVyKTtcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIGxldCBpbm5lciA9ICdEbyBub3QgaGF2ZSBhbiBhdmlsYWJsZSBwbGFuZSBvZiB0aGUgcmVxdWlyZWQgdHlwZS5cXG5CdXkgYSBuZXcgcGxhbmUgb3Igd2FpdCBmb3IgdGhlIGN1cnJlbnQgZmxpZ2h0cyB0byByZXR1cm4uJ1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd3dhcm5pbmcoaW5uZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIHRvYWN0aXZlKCl7XG4gICAgICAgIHRoaXMud2luZG93LmdldENoaWxkQnlOYW1lKFwiTXlfZmxpZ2h0c193aW5kb3dcIikuZ2V0Q2hpbGRCeU5hbWUoXCJhY3RpdmVcIikuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3cuZ2V0Q2hpbGRCeU5hbWUoXCJNeV9mbGlnaHRzX3dpbmRvd1wiKS5nZXRDaGlsZEJ5TmFtZShcImlubmVyXCIpLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICB0b2ZsaWdodGxpc3QoKXtcbiAgICAgICAgdGhpcy53aW5kb3cuZ2V0Q2hpbGRCeU5hbWUoXCJNeV9mbGlnaHRzX3dpbmRvd1wiKS5nZXRDaGlsZEJ5TmFtZShcImFjdGl2ZVwiKS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy53aW5kb3cuZ2V0Q2hpbGRCeU5hbWUoXCJNeV9mbGlnaHRzX3dpbmRvd1wiKS5nZXRDaGlsZEJ5TmFtZShcImlubmVyXCIpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSxcblxuICAgIHNob3d3YXJuaW5nKGlubmVyKXtcbiAgICAgICAgdGhpcy53YXJuaW5nX3dpbmRvdy5nZXRDaGlsZEJ5TmFtZShcIndhcm5pbmdfd2luZG93XCIpLmdldENoaWxkQnlOYW1lKFwiaW5uZXJcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBpbm5lcjtcbiAgICAgICAgbGV0IGEgPSBjYy5pbnN0YW50aWF0ZSh3YXJuaW5nX3dpbmRvdyk7XG4gICAgICAgIGEuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkQ2hpbGQoYSk7XG4gICAgfSxcbiAgICBzaG93c2V0dGluZygpe1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgbGV0IGEgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLnNldHRpbmdfd2luZG93cyk7XG4gICAgICAgIGEuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy53aW5kb3cuYWRkQ2hpbGQoYSk7XG4gICAgfSxcbiAgICBzaG93c2hvcCgpe1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgbGV0IGEgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLnNob3Bfd2luZG93KTtcbiAgICAgICAgYS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLndpbmRvdy5hZGRDaGlsZChhKTtcbiAgICB9LFxuICAgIHNob3didWlsZGluZ3MoKXtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIGxldCBhID0gY2MuaW5zdGFudGlhdGUodGhpcy5idWlsZGluZ3Nfd2luZG93KTtcbiAgICAgICAgYS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLndpbmRvdy5hZGRDaGlsZChhKTtcbiAgICB9LFxuICAgIHNob3didXNpbmVzcygpe1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgbGV0IGEgPSBjYy5pbnN0YW50aWF0ZSh0aGlzLmJ1c2luZXNzX2ZsaWdodHNfd2luZG93KTtcbiAgICAgICAgYS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLndpbmRvdy5hZGRDaGlsZChhKTtcbiAgICB9LFxuICAgIGhpZGUoKXtcbiAgICAgICAgdGhpcy53aW5kb3cuZGVzdHJveUFsbENoaWxkcmVuKCk7XG4gICAgfVxufSk7XG4iXX0=